============================
 0. Integer Addition Module
============================

Import Module:
==============
    >>> add_integer = __import__('0-add_integer').add_integer

Function:
=========
Write a function that adds 2 integers.

Operations:
===========
`a` and `b` must be integers or floats, otherwise raise a TypeError exception
with the message `a must be an integer` or `b must be an integer`


Section // Non-Parameters
=========================

Test case #0: A test case without Parameters

    >>> add_integer()
    Traceback (most recent call last):
    TypeError: add_integer() missing 1 required positional argument: 'a'

Test case #1: A test case for an argument with no assigned value

    >>> add_integer(a)
    Traceback (most recent call last):
    NameError: name 'a' is not defined

Test case #2: A test case for an argument with no assigned value

    >>> add_integer(a, 100)
    Traceback (most recent call last):
    NameError: name 'a' is not defined

Test case #3: A test case for using the default value of parameter 'b'

    >>> add_integer(5)
    103

Test case #4: A test case for using the default value of parameter 'b'
with the float parameter 'a'

    >>> add_integer(1.0, )
    99

Section // Numbers
==================

Test case #5: A test case between two integers:

    >>> add_integer(5, 6)
    11

Test case #6: A test case between two floats:

    >>> add_integer(5.0, 4.0)
    9

Test case #7: A test case between a integer and a float:

    >>> add_integer(5, 6.5)
    11

Test case #8: A test case between a float and a integer:

    >>> add_integer(5.5, 6)
    11

Test case #9: A test case between a positive integer and a negative integer:

    >>> add_integer(5, -4)
    1

Test case #10: A test case between a negative integer and a positive integer:

    >>> add_integer(-5, 4)
    -1

Test case #11: A test case between 2 negative integers:

    >>> add_integer(-4,-9)
    -13

Test case #12: A test case between 2 negative floats:

    >>> add_integer(-4.0, -6.0)
    -10

Test case #13: A test case between a negative float and a positive float:

    >>> add_integer(-5.0, 4.0)
    -1

Test case #14: A test case between a positive float and a negative float:

    >>> add_integer(5.0, -4.0)
    1

Section // Non-Numbers
======================

Test case #15: A test case with the first parameter as `None`

    >>> add_integer(None, 2)
    Traceback (most recent call last):
    TypeError: a must be an integer

Test case #16: A test case with the second parameter as `None`

    >>> add_integer(2, None)
    Traceback (most recent call last):
    TypeError: b must be an integer

Test case #17: A test case with the first parameter as `list`

    >>> add_integer([1,2], 5)
    Traceback (most recent call last):
    TypeError: a must be an integer

Test case #18: A test case with the second parameter as `str`

    >>> add_integer(2, "Bebo")
    Traceback (most recent call last):
    TypeError: b must be an integer

Section // Types
================

Test case #19: A test case to the check the returned value's type

    >>> type(add_integer(5, 10))
    <class 'int'>
